unit unitHardware;

interface

uses
 SysUtils, Windows;

//delphi ªÒ»°”≤≈Ã–Ú¡–∫≈°¢cpu∫≈°¢bios∫≈°¢Õ¯ø®∫≈
// 
type
THardwareInfo = class
public

  function GetIDENum: String;
  //function GetCPUID: TCPUID; assembler; register;


end;

implementation

{ HardwareInfo }

function THardwareInfo.GetIDENum: String;
type
    TSrbIoControl = packed record
    HeaderLength: Cardinal;
    Signature: Array[0..7] of Char;
    Timeout: Cardinal;
    ControlCode: Cardinal;
    ReturnCode: Cardinal;
    Length: Cardinal;
end;
SRB_IO_CONTROL = TSrbIoControl;
PSrbIoControl = ^TSrbIoControl;

TIDERegs = packed record
    bFeaturesReg: byte;
    bSectorCountReg: byte;
    bSectorNumberReg: byte;
    bCylLowReg: byte;
    bCylHighReg: byte;
    bDriveHeadReg: byte;
    bCommandReg: byte;
    bReserved: byte;
end;
IDEREGS = TIDERegs;
PIDERegs = ^TIDERegs;

TSendCmdInParams = packed record
    cBufferSize: LongWord;
    irDriveRegs: TIDERegs;
    bDriveNumber: byte;
    bReserved: Array[0..2] of Byte;
    dwReserved: Array[0..3] of LongWord;
    bBuffer: Array[0..0] of Byte;
end;
SENDCMDINPARAMS = TSendCmdInParams;
PSendCmdInParams = ^TSendCmdInParams;

TIdSector = packed record
    wGenConfig: LongWord;
    wNumCyls: LongWord;
    wReserved: LongWord;
    wNumHeads: LongWord;
    wBytesPerTrack: LongWord;
    wBytesPerSector: LongWord;
    wSectorsPerTrack: LongWord;
    wVendorUnique: Array[0..2] of Word;
    sSerialNumber: Array[0..19] of Char; 
    wBufferType: LongWord;
    wBufferSize: LongWord; 
    wECCSize: LongWord; 
    sFirmwareRev: Array[0..7] of Char; 
    sModelNumber: Array[0..39] of Char;
    wMoreVendorUnique: LongWord;
    wDoubleWordIO: LongWord;
    wCapabilities: LongWord;
    wReserved1: LongWord; 
    wPIOTiming: LongWord;
    wDMATiming: LongWord;
    wBS: LongWord;
    wNumCurrentCyls: Word;
    wNumCurrentHeads: Word; 
    wNumCurrentSectorsPerTrack: Word;
    ulCurrentSectorCapacity: Cardinal;
    wMultSectorStuff: Word;
    ulTotalAddressableSectors: Cardinal;
    wSingleWordDMA: Word;
    wMultiWordDMA: Word;
    bReserved: Array[0..127] of Byte;
end;
PIdSector = ^TIdSector;

const 
IDE_ID_FUNCTION = $EC;
IDENTIFY_BUFFER_SIZE = 512;
DFP_RECEIVE_DRIVE_DATA = $0007c088;
IOCTL_SCSI_MINIPORT = $0004d008;
IOCTL_SCSI_MINIPORT_IDENTIFY = $001b0501;
DataSize = sizeof(TSendCmdInParams)-1+IDENTIFY_BUFFER_SIZE;
BufferSize = SizeOf(SRB_IO_CONTROL)+DataSize;
W9xBufferSize = IDENTIFY_BUFFER_SIZE+16;
var 
hDevice: THandle;
cbBytesReturned: LongWord;
pInData: PSendCmdInParams;
pOutData:  Pointer;
Buffer: Array[0..BufferSize-1] of Byte;
srbControl:  TSrbIoControl absolute Buffer;

procedure ChangeByteOrder( var Data; Size:  Integer );
var
    ptr:  PChar;
    i:  Integer;
    c:  Char;
begin
    ptr := @Data;
    for i := 0 to (Size shr 1)-1 do
    begin
      c := ptr^;
      ptr^ := (ptr+1)^;
     (ptr+1)^ := c;
     Inc(ptr,2);
    end;
end;

begin 
Result := '';
FillChar(Buffer,BufferSize,#0);
if (Win32Platform =VER_PLATFORM_WIN32_NT) then
begin
    hDevice := CreateFile( '.Scsi0',GENERIC_READ or GENERIC_WRITE,FILE_SHARE_READ or FILE_SHARE_WRITE,nil, OPEN_EXISTING, 0, 0 );
    if hDevice=INVALID_HANDLE_VALUE then
      Exit;
    try
      srbControl.HeaderLength := SizeOf(SRB_IO_CONTROL);
      System.Move('SCSIDISK',srbControl.Signature,8);
      srbControl.Timeout := 2;
      srbControl.Length := DataSize;
      srbControl.ControlCode := IOCTL_SCSI_MINIPORT_IDENTIFY;
      pInData := PSendCmdInParams(PChar(@Buffer)+SizeOf(SRB_IO_CONTROL));
      pOutData := pInData;
      with pInData^ do
      begin
        cBufferSize := IDENTIFY_BUFFER_SIZE;
        bDriveNumber := 0;
        with irDriveRegs do
        begin
          bFeaturesReg := 0;
          bSectorCountReg := 1;
          bSectorNumberReg := 1;
          bCylLowReg := 0;
          bCylHighReg := 0;
          bDriveHeadReg := $A0;
          bCommandReg := IDE_ID_FUNCTION;
        end;
      end;
      if not DeviceIoControl( hDevice, IOCTL_SCSI_MINIPORT,@Buffer, BufferSize, @Buffer, BufferSize,cbBytesReturned, nil ) then
        Exit;
    finally
      CloseHandle(hDevice);
    end;
end else begin
    hDevice := CreateFile( '.SMARTVSD', 0, 0, nil,CREATE_NEW, 0, 0 );
    if hDevice=INVALID_HANDLE_VALUE then
	  Exit;
    try
      pInData := PSendCmdInParams(@Buffer);
      pOutData := @pInData^.bBuffer;
      with pInData^ do
      begin
        cBufferSize := IDENTIFY_BUFFER_SIZE;
        bDriveNumber := 0;
        with irDriveRegs do
        begin
          bFeaturesReg := 0;
          bSectorCountReg := 1;
          bSectorNumberReg := 1;
          bCylLowReg := 0;
          bCylHighReg := 0;
          bDriveHeadReg := $A0;
          bCommandReg := IDE_ID_FUNCTION;
        end;
      end;
      if not DeviceIoControl( hDevice, DFP_RECEIVE_DRIVE_DATA,pInData, SizeOf(TSendCmdInParams)-1, pOutData,W9xBufferSize, cbBytesReturned, nil ) then
        Exit;
    finally
      CloseHandle(hDevice);
    end;
end;
with PIdSector(PChar(pOutData)+16)^ do
begin
    ChangeByteOrder(sSerialNumber,SizeOf(sSerialNumber));
    SetString(Result,sSerialNumber,SizeOf(sSerialNumber));
end;
Result:=Trim(Result);
end;

end.
